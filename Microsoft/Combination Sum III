/*Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations.

Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations. */

class Solution {
public:
    void helper(vector<vector<int>>& ans, vector<int>& v, int k, int n, int ind, int sum){
        //base case - if successfully found a combination
        if(sum==n and k==0){                       
            ans.push_back(v);
            return;
        }
        //Combination not found
        if(sum>n) return;
        
        //digits can be taken from 1-9
        for(int i=ind; i<=9; i++){
        //digit is greater than the target, hence combinations of k cannot be completed.
            if(i>n) break;            
            v.push_back(i);
            helper(ans, v, k-1, n, i+1, sum+i);
            //after each combination is found we empty the dsz so that we can move to the next i for our combination.
            v.pop_back();
        }
    }
    
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        vector<int>v;
        helper(ans, v, k, n, 1,0);
        return ans;
    }
};
